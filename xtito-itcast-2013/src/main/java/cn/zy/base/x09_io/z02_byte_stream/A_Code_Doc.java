package cn.zy.base.x09_io.z02_byte_stream;

/**
 * Created by [Zy]
 * 2016/6/29 15:17
 */
public class A_Code_Doc {

/*

    【代码清单】
    cn.zy.base.x09_io.z01_file
    |--GetAllFileByQueue.java：遍历子目录中的内容，通过队列的方式。
            |--GetAllFiles.java：遍历子目录中的内容，通过递归的方式。
    cn.zy.base.x09_io.z01_file
    |--DiGuiDemo.java：讲解递归的使用和注意事项。
    cn.itcast.io.c.bytestream.read
    |--FileInputStreamDemo.java：读取一个文件，通过read()方法。
            |--FileInputStreamDemo2.java读取一个文件，通过read(byte[])方法。
    cn.itcast.io.c.bytestream.test
    |--CopyFileByBufferTest.java:通过自定义缓冲区数组复制文件。
            |--CopyFileTest.java：通过读写一个字节方式复制文件。
    cn.itcast.io.c.bytestream.write
    |--FileOutputStreamDemo.java：写入数据到一个文件，
            |--FileOutputStreamDemo2.java：续写和换行。
            |--FileOutputStreamDemo3.java：IO异常的处理。
    cn.itcast.io.d.bytestream
    |--ByteStreamDemo.java：了解available()方法。
    cn.itcast.io.e.bytestreambuffer
    |--ByteStreamBufferCopyFileTest.java：通过字节流缓冲区对象复制文件。
            【第23天 总结】
            【阶段一】
            【目标：遍历所有的子目录内容，递归】
            1,无非遍历当前目录内容的功能在功能内部被重复使用。
    只不过每次使用这个功能操作的子目录不同，所以就将子目录作为参数进行传递。
    这就是递归。
            2，递归
    2.1 函数自身调用自身。
            2.2 必须加入判断条件，避免栈内存溢出。
            2.3 控制递归次数，否则也容易栈内存溢出。
            2.4什么时候用递归呢？
    当功能被重复使用，而且重复使用都会之前的运算结果作为参数传递到下次的调用。
            2.5对于文件夹递归变量，如果层级很深担心溢出，可以使用任务队列的方式完成。
            【学习结果】
            1，递归的原理和注意事项，什么时候用要知道。自己写个案例。
            2，通过递归遍历指定目录中的所有内容。★★★★★
            3，通过任务队列的方式获取目录中的所有内容。★★★★★

            ------------------------
            【阶段二】
            【目标：操作设备上的数据，读写数据】
            1，将内存中数据都写入到文件中。
    需要使用系统资源，Java中用于操作系统资源的对象是哪个呢？
    通过api的索引关键字 Output Input
    找到OutputStream InputStream。
            2，OutputStream InputStream
    字节输出流和字节输入流的超类。
    定义了write 和read方法。
            3，它们的子类都具备名称定义规律：后缀名是父类名，前缀名是流对象的功能。★★★
            4，依据这个规律，找到了可以用于操作文件的流对象。流可以理解系统资源。
            5，写入数据到文件的特点。
            5.1 必须明确目的地文件，会自动创建，如果文件存在则会覆盖。
            5.2 续写只要在构造函数中传递true。换行只要使用系统的行分隔符。
            5.2IO异常处理必须使用finally关闭资源，在关闭前做!=null的判断。★★★★
            6，读取文件数据的特点：★★★★★
            6.1 明确数据源，让读取流和数据源相关联。
            6.2 读取有两种方式。
    read():一次读取一个字节并返回，没有数据返回-1.
    read(byte[])：读取一定数量的数据存储到byte[]中，返回读到字节的个数，没有数据返回-1.
    第二种方式高效。字节数组的长度建议为 1024.
            7，复制文件：需要中转。建议使用字节数组作为中转，效率高。

            【学习结果】
            1，查找IO流的方式，并使用共性方法。
            2，必须会使用输出流完成文件的续写动作并写入三行数据。
            3，两种读取方式的的区别。
            4，动手完成对文件数据的读取，并打印，代码要熟悉。
            5，必须明确复制文件的原理，并画图复制文件简图。


            ------------------------
            【阶段三】
            【目标：字节流的缓冲区对象】
            1，读写过程通过自定义的数组可以完成高效的读写操作。
            2，字节流中已经定义了封装数组的缓冲区对象，专门用于提高读写效率。
            3，缓冲区对象的出现，必须先有具体可以操作系统资源的流对象，
    因为缓冲区对象是给流对象的读写操作提高效率的。
            4，缓冲区的流对象的读写方法其实操作的都是缓冲区数组中的数据，所以高效。
            5，使用缓冲区读写时，建议大家要自定义一个数组用于两个缓冲区的数据交换作为中转。
    别忘了记得进行flush()。

            【学习结果】
            1，掌握缓冲区对象的基本使用。
            2，理解缓冲区的基本原理。参考图例。字节流缓冲区对象复制图解.JPG
    3，通过缓冲区对象复制媒体文件。
            ------------------------

            【作业】
            1，listFiles只能列出当前目录的下的文件和文件夹，能不能列出当前目录下的文件夹中所有的子目录中的内容呢？

            2，请删除一个带有内容的目录。

            3，获取指定目录下所有的.java文件(包含子目录中的)。

            4，将学生对象(姓名，语文分数，数学分数，英语分数，总分)按照总分从高到低排序，并将姓名和从高到低总分写入文件中。

            5，获取指定目录下所有的.java文件(包含子目录中的)，并将这些java文件的绝路路径写入到一个文件中。
    建立一个java文件清单列表。



            ----------------------------
            【课上笔记】

    输入输出操作：
            1,File对象了解（操作文件的属性等信息，它可以操作文件中的数据吗？） --操作文件中的数据-->对数据进行输入输出操作(往文件中写入数据)。


            1，需求：往文件中写入数据。
    通过api查找output。找到很多，其中java.io.OutputStream
    OutputStream: 输出字节流的超类,1,操作的数据都是字节，2，定义了输出字节流的基本共性功能。3，输出流中定义都是写write方法。
    操作字节数组write(byte[])，操作单个字节write(byte)。
    子类有规律：所有的子类名称后缀是父类名，前缀名是这个流对象功能。
    想要操作文件： FileOutputStream

    2,需求：读取文件中的数据，显示在屏幕上。
    通过api查找input。java.io.InputStream
    InputStream：字节输入流的超类。
    常见功能：
            1，int read():读取一个字节并返回，没有字节返回-1.
            2，int read(byte[]): 读取一定量的字节数，并存储到字节数组中，返回读取到的字节数。
    用于读取文件的字节输入流对象：FileInputStream。


            3，已经完成了基本的读写操作，使用了数组后，提高了效率。
    io中的字节流中也有提高效率的对象，无非就是把数组进行封装了。
    通过父类的另请参见：BufferedInputStream  BufferedOutputStream
    字节流的缓冲区的出现提高了流的读写效率。
    缓冲区对象中封装了数组。为了提高流的操作效率，所以缓冲区 的建立必须要明确具体的流对象。

    缓冲区借助了流对象读方法获取数据，并存储到缓冲区对象的数组中。
    缓冲区的read方法，是从缓冲区的数组中在读取数据。
    将读取的数据通过中转（变量或数组）转到写入到缓冲区数组中，写入缓冲区在通过流将数据写入目的地。


            -------------------
    FileInputStream--FileOutputStream
    BufferedInputStream--BufferedOutputStream


*/


}
